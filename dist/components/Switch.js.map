{"version":3,"sources":["../../src/components/Switch.js"],"names":["Switch","context","props","absolute","getChildLocation","childrens","React","Children","toArray","children","lastIndex","length","childIndex","parseInt","child","kwargs","getRouteKwargs","path","cloneElement","getRouteLocation","Component","routing","state"],"mappings":";;;;;;;;AAGA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;+eAPA;;;;;IASMA,M;;;;;;;;;;;2CACiB;AACf,gBAAMC,UAAU,KAAKA,OAArB;AACA,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAZ,IAAwBF,OAAxB,IAAmCA,QAAQG,gBAA/C,EAAiE,OAAOH,QAAQG,gBAAR,EAAP;;AAEjE,mBAAO,iBAAI,IAAJ,EAAU,iCAAV,EAA6C,EAA7C,CAAP;AACH;;;iCAEQ;AACL,gBAAMC,YAAYC,gBAAMC,QAAN,CAAeC,OAAf,CAAuB,KAAKN,KAAL,CAAWO,QAAlC,CAAlB;;AAEA,gBAAMC,YAAYL,UAAUM,MAAV,GAAmB,CAArC;AACA,iBAAK,IAAIC,UAAT,IAAuBP,SAAvB,EAAkC;AAC9B,oBAAIO,aAAaC,SAASD,UAAT,CAAjB;AACA,oBAAIE,QAAQT,UAAUO,UAAV,CAAZ;AACA;AACA,oBAAIV,QAAQY,MAAMZ,KAAlB;;AAEA,oBAAIa,SAAS,KAAKd,OAAL,CAAae,cAAb,GAA8B,KAAKf,OAAL,CAAae,cAAb,EAA9B,GAA8D,EAA3E;;AAEA,oBAAI,CAACd,MAAMe,IAAP,IAAeL,eAAeF,SAAlC,EAA6C;AACzC;AACA,2BAAOJ,gBAAMY,YAAN,CAAmBJ,KAAnB,EAA0B,EAAEC,QAAQA,MAAV,EAA1B,CAAP;AACH;;AAED,oBAAI,2BAAa,KAAKI,gBAAL,EAAb,EAAsCjB,MAAMe,IAA5C,CAAJ,EAAuD;AACnD,2BAAOX,gBAAMY,YAAN,CAAmBJ,KAAnB,EAA0B,EAAEC,QAAQA,MAAV,EAA1B,CAAP;AACH;;AAED;AACA;AACA;AACH;;AAED,mBAAO,IAAP;AACH;;;;EAnCgBT,gBAAMc,S;;AAsC3B,gCAAkBpB,MAAlB;;kBAEe,yBAAQ;AAAA,WAAU,EAAEqB,SAASC,MAAMD,OAAjB,EAAV;AAAA,CAAR,EAA+CrB,MAA/C,C","file":"Switch.js","sourcesContent":["/**\n * Created by sidchik on 28.03.17.\n */\nimport React from 'react';\nimport { getMatchInfo } from '../helpers/matcher';\nimport { connect } from 'react-redux';\nimport { addRoutingContext } from '../helpers/context';\nimport { get } from 'lodash';\n\nclass Switch extends React.Component {\n    getRouteLocation() {\n        const context = this.context;\n        if (!this.props.absolute && context && context.getChildLocation) return context.getChildLocation();\n\n        return get(this, 'props.routing.location.pathname', '');\n    }\n\n    render() {\n        const childrens = React.Children.toArray(this.props.children);\n\n        const lastIndex = childrens.length - 1;\n        for (let childIndex in childrens) {\n            let childIndex = parseInt(childIndex);\n            let child = childrens[childIndex];\n            // if (child.type.WrappedComponent.name === 'Route') {\n            let props = child.props;\n\n            let kwargs = this.context.getRouteKwargs ? this.context.getRouteKwargs() : {};\n\n            if (!props.path && childIndex === lastIndex) {\n                // Not Found Route\n                return React.cloneElement(child, { kwargs: kwargs });\n            }\n\n            if (getMatchInfo(this.getRouteLocation(), props.path)) {\n                return React.cloneElement(child, { kwargs: kwargs });\n            }\n\n            // } else {\n            //     console.error('Switch accepts only Route children');\n            // }\n        }\n\n        return null;\n    }\n}\n\naddRoutingContext(Switch);\n\nexport default connect(state => ({ routing: state.routing }))(Switch);"]}